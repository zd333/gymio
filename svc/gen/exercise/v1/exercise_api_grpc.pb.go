// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package exercisev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExerciseAPIClient is the client API for ExerciseAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExerciseAPIClient interface {
	CreateExercise(ctx context.Context, in *CreateExerciseRequest, opts ...grpc.CallOption) (*CreateExerciseResponse, error)
	GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*GetExerciseResponse, error)
	UpdateExercise(ctx context.Context, in *UpdateExerciseRequest, opts ...grpc.CallOption) (*UpdateExerciseResponse, error)
	DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*DeleteExerciseResponse, error)
	CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*CreatePropertyResponse, error)
	GetProperties(ctx context.Context, in *GetPropertiesRequest, opts ...grpc.CallOption) (*GetPropertiesResponse, error)
	UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error)
	DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error)
	FindExercisesByProperties(ctx context.Context, in *FindExercisesByPropertiesRequest, opts ...grpc.CallOption) (*FindExercisesByPropertiesResponse, error)
}

type exerciseAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewExerciseAPIClient(cc grpc.ClientConnInterface) ExerciseAPIClient {
	return &exerciseAPIClient{cc}
}

var exerciseAPICreateExerciseStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateExercise",
}

func (c *exerciseAPIClient) CreateExercise(ctx context.Context, in *CreateExerciseRequest, opts ...grpc.CallOption) (*CreateExerciseResponse, error) {
	out := new(CreateExerciseResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPI/CreateExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIGetExerciseStreamDesc = &grpc.StreamDesc{
	StreamName: "GetExercise",
}

func (c *exerciseAPIClient) GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*GetExerciseResponse, error) {
	out := new(GetExerciseResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPI/GetExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIUpdateExerciseStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateExercise",
}

func (c *exerciseAPIClient) UpdateExercise(ctx context.Context, in *UpdateExerciseRequest, opts ...grpc.CallOption) (*UpdateExerciseResponse, error) {
	out := new(UpdateExerciseResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPI/UpdateExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIDeleteExerciseStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteExercise",
}

func (c *exerciseAPIClient) DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*DeleteExerciseResponse, error) {
	out := new(DeleteExerciseResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPI/DeleteExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPICreatePropertyStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateProperty",
}

func (c *exerciseAPIClient) CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*CreatePropertyResponse, error) {
	out := new(CreatePropertyResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPI/CreateProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIGetPropertiesStreamDesc = &grpc.StreamDesc{
	StreamName: "GetProperties",
}

func (c *exerciseAPIClient) GetProperties(ctx context.Context, in *GetPropertiesRequest, opts ...grpc.CallOption) (*GetPropertiesResponse, error) {
	out := new(GetPropertiesResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPI/GetProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIUpdatePropertyStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateProperty",
}

func (c *exerciseAPIClient) UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error) {
	out := new(UpdatePropertyResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPI/UpdateProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIDeletePropertyStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteProperty",
}

func (c *exerciseAPIClient) DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error) {
	out := new(DeletePropertyResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPI/DeleteProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIFindExercisesByPropertiesStreamDesc = &grpc.StreamDesc{
	StreamName: "FindExercisesByProperties",
}

func (c *exerciseAPIClient) FindExercisesByProperties(ctx context.Context, in *FindExercisesByPropertiesRequest, opts ...grpc.CallOption) (*FindExercisesByPropertiesResponse, error) {
	out := new(FindExercisesByPropertiesResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPI/FindExercisesByProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExerciseAPIService is the service API for ExerciseAPI service.
// Fields should be assigned to their respective handler implementations only before
// RegisterExerciseAPIService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ExerciseAPIService struct {
	CreateExercise            func(context.Context, *CreateExerciseRequest) (*CreateExerciseResponse, error)
	GetExercise               func(context.Context, *GetExerciseRequest) (*GetExerciseResponse, error)
	UpdateExercise            func(context.Context, *UpdateExerciseRequest) (*UpdateExerciseResponse, error)
	DeleteExercise            func(context.Context, *DeleteExerciseRequest) (*DeleteExerciseResponse, error)
	CreateProperty            func(context.Context, *CreatePropertyRequest) (*CreatePropertyResponse, error)
	GetProperties             func(context.Context, *GetPropertiesRequest) (*GetPropertiesResponse, error)
	UpdateProperty            func(context.Context, *UpdatePropertyRequest) (*UpdatePropertyResponse, error)
	DeleteProperty            func(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error)
	FindExercisesByProperties func(context.Context, *FindExercisesByPropertiesRequest) (*FindExercisesByPropertiesResponse, error)
}

func (s *ExerciseAPIService) createExercise(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPI/CreateExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateExercise(ctx, req.(*CreateExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIService) getExercise(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPI/GetExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetExercise(ctx, req.(*GetExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIService) updateExercise(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPI/UpdateExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateExercise(ctx, req.(*UpdateExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIService) deleteExercise(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPI/DeleteExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteExercise(ctx, req.(*DeleteExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIService) createProperty(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPI/CreateProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateProperty(ctx, req.(*CreatePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIService) getProperties(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPI/GetProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetProperties(ctx, req.(*GetPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIService) updateProperty(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPI/UpdateProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateProperty(ctx, req.(*UpdatePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIService) deleteProperty(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPI/DeleteProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteProperty(ctx, req.(*DeletePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIService) findExercisesByProperties(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExercisesByPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.FindExercisesByProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPI/FindExercisesByProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FindExercisesByProperties(ctx, req.(*FindExercisesByPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterExerciseAPIService registers a service implementation with a gRPC server.
func RegisterExerciseAPIService(s grpc.ServiceRegistrar, srv *ExerciseAPIService) {
	srvCopy := *srv
	if srvCopy.CreateExercise == nil {
		srvCopy.CreateExercise = func(context.Context, *CreateExerciseRequest) (*CreateExerciseResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateExercise not implemented")
		}
	}
	if srvCopy.GetExercise == nil {
		srvCopy.GetExercise = func(context.Context, *GetExerciseRequest) (*GetExerciseResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetExercise not implemented")
		}
	}
	if srvCopy.UpdateExercise == nil {
		srvCopy.UpdateExercise = func(context.Context, *UpdateExerciseRequest) (*UpdateExerciseResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateExercise not implemented")
		}
	}
	if srvCopy.DeleteExercise == nil {
		srvCopy.DeleteExercise = func(context.Context, *DeleteExerciseRequest) (*DeleteExerciseResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeleteExercise not implemented")
		}
	}
	if srvCopy.CreateProperty == nil {
		srvCopy.CreateProperty = func(context.Context, *CreatePropertyRequest) (*CreatePropertyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateProperty not implemented")
		}
	}
	if srvCopy.GetProperties == nil {
		srvCopy.GetProperties = func(context.Context, *GetPropertiesRequest) (*GetPropertiesResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetProperties not implemented")
		}
	}
	if srvCopy.UpdateProperty == nil {
		srvCopy.UpdateProperty = func(context.Context, *UpdatePropertyRequest) (*UpdatePropertyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateProperty not implemented")
		}
	}
	if srvCopy.DeleteProperty == nil {
		srvCopy.DeleteProperty = func(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeleteProperty not implemented")
		}
	}
	if srvCopy.FindExercisesByProperties == nil {
		srvCopy.FindExercisesByProperties = func(context.Context, *FindExercisesByPropertiesRequest) (*FindExercisesByPropertiesResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method FindExercisesByProperties not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "exercise.v1.ExerciseAPI",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreateExercise",
				Handler:    srvCopy.createExercise,
			},
			{
				MethodName: "GetExercise",
				Handler:    srvCopy.getExercise,
			},
			{
				MethodName: "UpdateExercise",
				Handler:    srvCopy.updateExercise,
			},
			{
				MethodName: "DeleteExercise",
				Handler:    srvCopy.deleteExercise,
			},
			{
				MethodName: "CreateProperty",
				Handler:    srvCopy.createProperty,
			},
			{
				MethodName: "GetProperties",
				Handler:    srvCopy.getProperties,
			},
			{
				MethodName: "UpdateProperty",
				Handler:    srvCopy.updateProperty,
			},
			{
				MethodName: "DeleteProperty",
				Handler:    srvCopy.deleteProperty,
			},
			{
				MethodName: "FindExercisesByProperties",
				Handler:    srvCopy.findExercisesByProperties,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "exercise/v1/exercise_api.proto",
	}

	s.RegisterService(&sd, nil)
}

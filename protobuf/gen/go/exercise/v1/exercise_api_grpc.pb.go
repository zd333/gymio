// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package exercisev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExerciseAPIServiceClient is the client API for ExerciseAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExerciseAPIServiceClient interface {
	CreateExercise(ctx context.Context, in *CreateExerciseRequest, opts ...grpc.CallOption) (*CreateExerciseResponse, error)
	GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*GetExerciseResponse, error)
	UpdateExercise(ctx context.Context, in *UpdateExerciseRequest, opts ...grpc.CallOption) (*UpdateExerciseResponse, error)
	DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*DeleteExerciseResponse, error)
	CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*CreatePropertyResponse, error)
	UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error)
	DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error)
	UpdatePropertiesOfExercise(ctx context.Context, in *UpdatePropertiesOfExerciseRequest, opts ...grpc.CallOption) (*UpdatePropertiesOfExerciseResponse, error)
	FindExercisesByProperties(ctx context.Context, in *FindExercisesByPropertiesRequest, opts ...grpc.CallOption) (*FindExercisesByPropertiesResponse, error)
}

type exerciseAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExerciseAPIServiceClient(cc grpc.ClientConnInterface) ExerciseAPIServiceClient {
	return &exerciseAPIServiceClient{cc}
}

var exerciseAPIServiceCreateExerciseStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateExercise",
}

func (c *exerciseAPIServiceClient) CreateExercise(ctx context.Context, in *CreateExerciseRequest, opts ...grpc.CallOption) (*CreateExerciseResponse, error) {
	out := new(CreateExerciseResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPIService/CreateExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIServiceGetExerciseStreamDesc = &grpc.StreamDesc{
	StreamName: "GetExercise",
}

func (c *exerciseAPIServiceClient) GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*GetExerciseResponse, error) {
	out := new(GetExerciseResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPIService/GetExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIServiceUpdateExerciseStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateExercise",
}

func (c *exerciseAPIServiceClient) UpdateExercise(ctx context.Context, in *UpdateExerciseRequest, opts ...grpc.CallOption) (*UpdateExerciseResponse, error) {
	out := new(UpdateExerciseResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPIService/UpdateExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIServiceDeleteExerciseStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteExercise",
}

func (c *exerciseAPIServiceClient) DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*DeleteExerciseResponse, error) {
	out := new(DeleteExerciseResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPIService/DeleteExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIServiceCreatePropertyStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateProperty",
}

func (c *exerciseAPIServiceClient) CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*CreatePropertyResponse, error) {
	out := new(CreatePropertyResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPIService/CreateProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIServiceUpdatePropertyStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateProperty",
}

func (c *exerciseAPIServiceClient) UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error) {
	out := new(UpdatePropertyResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPIService/UpdateProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIServiceDeletePropertyStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteProperty",
}

func (c *exerciseAPIServiceClient) DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error) {
	out := new(DeletePropertyResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPIService/DeleteProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIServiceUpdatePropertiesOfExerciseStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdatePropertiesOfExercise",
}

func (c *exerciseAPIServiceClient) UpdatePropertiesOfExercise(ctx context.Context, in *UpdatePropertiesOfExerciseRequest, opts ...grpc.CallOption) (*UpdatePropertiesOfExerciseResponse, error) {
	out := new(UpdatePropertiesOfExerciseResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPIService/UpdatePropertiesOfExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var exerciseAPIServiceFindExercisesByPropertiesStreamDesc = &grpc.StreamDesc{
	StreamName: "FindExercisesByProperties",
}

func (c *exerciseAPIServiceClient) FindExercisesByProperties(ctx context.Context, in *FindExercisesByPropertiesRequest, opts ...grpc.CallOption) (*FindExercisesByPropertiesResponse, error) {
	out := new(FindExercisesByPropertiesResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.ExerciseAPIService/FindExercisesByProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExerciseAPIServiceService is the service API for ExerciseAPIService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterExerciseAPIServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ExerciseAPIServiceService struct {
	CreateExercise             func(context.Context, *CreateExerciseRequest) (*CreateExerciseResponse, error)
	GetExercise                func(context.Context, *GetExerciseRequest) (*GetExerciseResponse, error)
	UpdateExercise             func(context.Context, *UpdateExerciseRequest) (*UpdateExerciseResponse, error)
	DeleteExercise             func(context.Context, *DeleteExerciseRequest) (*DeleteExerciseResponse, error)
	CreateProperty             func(context.Context, *CreatePropertyRequest) (*CreatePropertyResponse, error)
	UpdateProperty             func(context.Context, *UpdatePropertyRequest) (*UpdatePropertyResponse, error)
	DeleteProperty             func(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error)
	UpdatePropertiesOfExercise func(context.Context, *UpdatePropertiesOfExerciseRequest) (*UpdatePropertiesOfExerciseResponse, error)
	FindExercisesByProperties  func(context.Context, *FindExercisesByPropertiesRequest) (*FindExercisesByPropertiesResponse, error)
}

func (s *ExerciseAPIServiceService) createExercise(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPIService/CreateExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateExercise(ctx, req.(*CreateExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIServiceService) getExercise(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPIService/GetExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetExercise(ctx, req.(*GetExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIServiceService) updateExercise(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPIService/UpdateExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateExercise(ctx, req.(*UpdateExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIServiceService) deleteExercise(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPIService/DeleteExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteExercise(ctx, req.(*DeleteExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIServiceService) createProperty(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPIService/CreateProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateProperty(ctx, req.(*CreatePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIServiceService) updateProperty(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPIService/UpdateProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateProperty(ctx, req.(*UpdatePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIServiceService) deleteProperty(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPIService/DeleteProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteProperty(ctx, req.(*DeletePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIServiceService) updatePropertiesOfExercise(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePropertiesOfExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdatePropertiesOfExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPIService/UpdatePropertiesOfExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePropertiesOfExercise(ctx, req.(*UpdatePropertiesOfExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ExerciseAPIServiceService) findExercisesByProperties(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExercisesByPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.FindExercisesByProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/exercise.v1.ExerciseAPIService/FindExercisesByProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FindExercisesByProperties(ctx, req.(*FindExercisesByPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterExerciseAPIServiceService registers a service implementation with a gRPC server.
func RegisterExerciseAPIServiceService(s grpc.ServiceRegistrar, srv *ExerciseAPIServiceService) {
	srvCopy := *srv
	if srvCopy.CreateExercise == nil {
		srvCopy.CreateExercise = func(context.Context, *CreateExerciseRequest) (*CreateExerciseResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateExercise not implemented")
		}
	}
	if srvCopy.GetExercise == nil {
		srvCopy.GetExercise = func(context.Context, *GetExerciseRequest) (*GetExerciseResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetExercise not implemented")
		}
	}
	if srvCopy.UpdateExercise == nil {
		srvCopy.UpdateExercise = func(context.Context, *UpdateExerciseRequest) (*UpdateExerciseResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateExercise not implemented")
		}
	}
	if srvCopy.DeleteExercise == nil {
		srvCopy.DeleteExercise = func(context.Context, *DeleteExerciseRequest) (*DeleteExerciseResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeleteExercise not implemented")
		}
	}
	if srvCopy.CreateProperty == nil {
		srvCopy.CreateProperty = func(context.Context, *CreatePropertyRequest) (*CreatePropertyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateProperty not implemented")
		}
	}
	if srvCopy.UpdateProperty == nil {
		srvCopy.UpdateProperty = func(context.Context, *UpdatePropertyRequest) (*UpdatePropertyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateProperty not implemented")
		}
	}
	if srvCopy.DeleteProperty == nil {
		srvCopy.DeleteProperty = func(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeleteProperty not implemented")
		}
	}
	if srvCopy.UpdatePropertiesOfExercise == nil {
		srvCopy.UpdatePropertiesOfExercise = func(context.Context, *UpdatePropertiesOfExerciseRequest) (*UpdatePropertiesOfExerciseResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdatePropertiesOfExercise not implemented")
		}
	}
	if srvCopy.FindExercisesByProperties == nil {
		srvCopy.FindExercisesByProperties = func(context.Context, *FindExercisesByPropertiesRequest) (*FindExercisesByPropertiesResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method FindExercisesByProperties not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "exercise.v1.ExerciseAPIService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreateExercise",
				Handler:    srvCopy.createExercise,
			},
			{
				MethodName: "GetExercise",
				Handler:    srvCopy.getExercise,
			},
			{
				MethodName: "UpdateExercise",
				Handler:    srvCopy.updateExercise,
			},
			{
				MethodName: "DeleteExercise",
				Handler:    srvCopy.deleteExercise,
			},
			{
				MethodName: "CreateProperty",
				Handler:    srvCopy.createProperty,
			},
			{
				MethodName: "UpdateProperty",
				Handler:    srvCopy.updateProperty,
			},
			{
				MethodName: "DeleteProperty",
				Handler:    srvCopy.deleteProperty,
			},
			{
				MethodName: "UpdatePropertiesOfExercise",
				Handler:    srvCopy.updatePropertiesOfExercise,
			},
			{
				MethodName: "FindExercisesByProperties",
				Handler:    srvCopy.findExercisesByProperties,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "exercise/v1/exercise_api.proto",
	}

	s.RegisterService(&sd, nil)
}
